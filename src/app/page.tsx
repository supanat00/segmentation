"use client"; // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Client Component ‡πÉ‡∏ô Next.js

import React, { useEffect, useRef } from "react";
import type { Results } from "@mediapipe/selfie_segmentation";


const Home: React.FC = () => {
  const inputVideoRef = useRef<HTMLVideoElement | null>(null);
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const contextRef = useRef<CanvasRenderingContext2D | null>(null);
  const bgVideoRef = useRef<HTMLVideoElement | null>(null);

  const onResults = (results: Results) => {
    const ctx = contextRef.current;
    if (!ctx || !canvasRef.current) return;

    ctx.save();
    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô)
    const videoWidth = results.image.width;
    const videoHeight = results.image.height;
    const canvasWidth = canvasRef.current.width;
    const canvasHeight = canvasRef.current.height;

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    const scale = Math.min(canvasWidth / videoWidth, canvasHeight / videoHeight);
    const newWidth = videoWidth * scale;
    const newHeight = videoHeight * scale;

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
    const xOffset = (canvasWidth - newWidth) / 1;
    const yOffset = (canvasHeight - newHeight) / 1;

    // üî• ‡∏ß‡∏≤‡∏î‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏•‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô (‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)
    ctx.drawImage(results.image, xOffset, yOffset, newWidth, newHeight);

    // üî• ‡πÉ‡∏ä‡πâ segmentationMask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å
    ctx.globalCompositeOperation = "destination-in";
    ctx.drawImage(results.segmentationMask, xOffset, yOffset, newWidth, newHeight);

    // üî• ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏õ
    ctx.globalCompositeOperation = "destination-over";
    if (bgVideoRef.current && bgVideoRef.current.readyState >= 2) {
      ctx.drawImage(bgVideoRef.current, 0, 0, canvasWidth, canvasHeight);
    }

    ctx.restore();
  };


  useEffect(() => {
    const loadSelfieSegmentation = async () => {
      const { SelfieSegmentation } = await import("@mediapipe/selfie_segmentation"); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Mediapipe ‡πÅ‡∏ö‡∏ö Dynamic
      if (!canvasRef.current) return;
      contextRef.current = canvasRef.current.getContext("2d");

      // üî• ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
      if (bgVideoRef.current) {
        bgVideoRef.current.src = "https://www.w3schools.com/html/mov_bbb.mp4"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ
        bgVideoRef.current.loop = true;
        bgVideoRef.current.muted = true;
        bgVideoRef.current.autoplay = true;
        bgVideoRef.current.play();
      }

      const constraints: MediaStreamConstraints = {
        video: { width: { max: 1280 }, height: { max: 720 } },
      };

      navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
        if (inputVideoRef.current) {
          inputVideoRef.current.srcObject = stream;
        }
        sendToMediaPipe();
      });

      const selfieSegmentation = new SelfieSegmentation({
        locateFile: (file) =>
          `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,
      });

      selfieSegmentation.setOptions({
        modelSelection: 1,
        selfieMode: true,
      });

      selfieSegmentation.onResults(onResults);

      const sendToMediaPipe = async () => {
        if (!inputVideoRef.current?.videoWidth) {
          requestAnimationFrame(sendToMediaPipe);
        } else {
          await selfieSegmentation.send({ image: inputVideoRef.current });
          requestAnimationFrame(sendToMediaPipe);
        }
      };
    }
    loadSelfieSegmentation(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
  }, []);

  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white">
      <video autoPlay ref={inputVideoRef} style={{ display: "none" }} />
      <video ref={bgVideoRef} style={{ display: "none" }} />
      {/* üî• ‡πÅ‡∏™‡∏î‡∏á Canvas ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ */}
      <canvas ref={canvasRef} width={'720px'} height={'1280px'} className="absolute top-0 left-0 w-full h-full" />
    </main>
  );
};

export default Home;
